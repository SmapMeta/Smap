/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.smap.view;

import br.com.relatoriocombanco.RelatorioJDBC;
import br.com.smap.odds.MantelHaenszel;
import br.com.smap.persistencia.MantelDAO;
import br.com.smap.persistencia.MantelHaenszelImplements;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ederson
 */
public class MenuPrincipal extends javax.swing.JFrame {

    
    private int contador = 0;
    private MantelHaenszelImplements mhi = new MantelHaenszelImplements();
    private MantelHaenszel mh = new MantelHaenszel();
    private JTable tabela = new JTable();
    private DefaultTableModel modelo = new DefaultTableModel();
    private String itemColunaA = "";
    private String itemColunaB = "";
    private String itemColunaC = "";
    private String itemColunaD = "";
    private String colum2 = "";
    private String colum3 = "";
    private List<MantelHaenszel> listaMantel = new ArrayList<>();
    private List<MantelHaenszel> listaCompleta = new ArrayList<>();

    public List<MantelHaenszel> getListaCompleta() {
        return listaCompleta;
    }

    public static void setListaCompleta(List<MantelHaenszel> listaCompleta) {
        listaCompleta = listaCompleta;
    }

    public MenuPrincipal() {
        mhi = new MantelHaenszelImplements();
        mh = new MantelHaenszel();
        tabela = new JTable();
        modelo = new DefaultTableModel();
        itemColunaA = "";
        itemColunaB = "";
        itemColunaC = "";
        itemColunaD = "";
        colum2 = "";
        colum3 = "";
        listaMantel = new ArrayList<>();
        listaCompleta = new ArrayList<>();

        initComponents();

        criaTabela();

        painelRolagem.setViewportView(tabela);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PainelPrincipal = new javax.swing.JPanel();
        painelRolagem = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        btCalcula = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuAnalyze = new javax.swing.JMenu();
        mItemOpcao = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PainelPrincipal.setBackground(new java.awt.Color(153, 153, 153));

        painelRolagem.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        btCalcula.setText("Calculate");
        btCalcula.setToolTipText("");
        btCalcula.setAutoscrolls(true);
        btCalcula.setHideActionText(true);
        btCalcula.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btCalcula.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btCalcula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCalculaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(btCalcula, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btCalcula)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout PainelPrincipalLayout = new javax.swing.GroupLayout(PainelPrincipal);
        PainelPrincipal.setLayout(PainelPrincipalLayout);
        PainelPrincipalLayout.setHorizontalGroup(
            PainelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelPrincipalLayout.createSequentialGroup()
                .addComponent(painelRolagem, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(177, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PainelPrincipalLayout.setVerticalGroup(
            PainelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelPrincipalLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(PainelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PainelPrincipalLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painelRolagem, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE))
                    .addGroup(PainelPrincipalLayout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        menuFile.setText("File");
        jMenuBar1.add(menuFile);

        menuAnalyze.setText("Analyze");

        mItemOpcao.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mItemOpcao.setText("Options..");
        mItemOpcao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemOpcaoActionPerformed(evt);
            }
        });
        menuAnalyze.add(mItemOpcao);

        jMenuBar1.add(menuAnalyze);

        menuHelp.setText("Help");
        jMenuBar1.add(menuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PainelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PainelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btCalculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCalculaActionPerformed
        tabela.clearSelection();
        SelecaoDeOpcao sl= new SelecaoDeOpcao();
        sl.selectOpc95();
        tabela.editCellAt(tabela.getSelectedRow(), 0);
        jLabel1.setFocusable(true);
        new MenuPrincipal();
        listaCompleta.clear();
        listaMantel.clear();
        MantelDAO mdao = new MantelDAO();
        mdao.remove();
        try {
            calculaDOR();
        } catch (SQLException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            RelatorioJDBC bc = new RelatorioJDBC();
            bc.exibirRelatorio();
        } catch (SQLException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        listaCompleta = new ArrayList<>();
        
    }//GEN-LAST:event_btCalculaActionPerformed

    private void mItemOpcaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemOpcaoActionPerformed
        SelecaoDeOpcao sdo = new SelecaoDeOpcao();
        sdo.setVisible(true);
    }//GEN-LAST:event_mItemOpcaoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PainelPrincipal;
    private javax.swing.JButton btCalcula;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuItem mItemOpcao;
    private javax.swing.JMenu menuAnalyze;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JScrollPane painelRolagem;
    // End of variables declaration//GEN-END:variables
    private void criaTabela() {
        tabela = new JTable(modelo);
        modelo.addColumn("NÂº");
        modelo.addColumn("Author");
        modelo.addColumn("Studyld");
        modelo.addColumn("TP");//a
        modelo.addColumn("FP");//b
        modelo.addColumn("FN");//c
        modelo.addColumn("TN");//d
        tabela.getColumnModel().getColumn(0).setPreferredWidth(50);
        tabela.getColumnModel().getColumn(1).setPreferredWidth(400);
        tabela.getColumnModel().getColumn(2).setPreferredWidth(400);
        tabela.getColumnModel().getColumn(3).setPreferredWidth(100);
        tabela.getColumnModel().getColumn(4).setPreferredWidth(100);
        tabela.getColumnModel().getColumn(5).setPreferredWidth(100);
        tabela.getColumnModel().getColumn(6).setPreferredWidth(100);
        tabela.getTableHeader().setReorderingAllowed(false);
        preencherJTable();
    }

    private void preencherJTable() {

        for (int i = 1; i <= 500; i++) {
            modelo.addRow(new Object[]{i});
        }
    }

    private void calculaDOR() throws SQLException {
        listaMantel.removeAll(listaMantel);
        mh = new MantelHaenszel();
        listaCompleta.removeAll(listaCompleta);
        mhi = new MantelHaenszelImplements();
        contador = 0;

        for (int i = 0; i < 500; i++) {

            try {
                mh = new MantelHaenszel();
                //Adere os arquivos da tebela
                mh.setId(i + 1);
                mh.setAutor((String) tabela.getValueAt(i, 1));
                mh.setEstudo((String) tabela.getValueAt(i, 2));
                itemColunaA = (String) tabela.getValueAt(i, 3);
                itemColunaB = (String) tabela.getValueAt(i, 4);
                itemColunaC = (String) tabela.getValueAt(i, 5);
                itemColunaD = (String) tabela.getValueAt(i, 6);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro na leitura dos arquivos: " + e.getMessage());
                break;

            }

            if (itemColunaA == null && itemColunaB == null && itemColunaC == null && itemColunaD == null) {
                continue;
            } else if (itemColunaA == null || itemColunaB == null || itemColunaC == null || itemColunaD == null
                    || itemColunaA == "" || itemColunaB == "" || itemColunaC == "" || itemColunaD == "") {

                JOptionPane.showMessageDialog(null, "Por favor, complete todos os campos da linha: " + (i + 1));
                break;
            }

            try {
                //Passsa os valores para a classe MantelHaenszel
                mh.setItemColunaA(Double.parseDouble(itemColunaA));
                mh.setItemColunaB(Double.parseDouble(itemColunaB));
                mh.setItemColunaC(Double.parseDouble(itemColunaC));
                mh.setItemColunaD(Double.parseDouble(itemColunaD));

                //Nenhum elemento pode ter dois ou mais valor "zero"
                if ((mh.getItemColunaA() == 0 && mh.getItemColunaB() == 0) || (mh.getItemColunaA() == 0 && mh.getItemColunaC() == 0)
                        || (mh.getItemColunaA() == 0 && mh.getItemColunaD() == 0) || (mh.getItemColunaB() == 0 && mh.getItemColunaC() == 0)
                        || (mh.getItemColunaB() == 0 && mh.getItemColunaD() == 0) || (mh.getItemColunaC() == 0 && mh.getItemColunaD() == 0)) {
                    System.out.println("Estudo da linha " + (i + 1) + " foi descartado...");
                    continue;
                }

                mh = (mhi.calculaMantelHaenszel(mh));
                System.out.println("dor: " + mh.getDor());

                double valorPeso = (mh.getItemColunaB() * mh.getItemColunaC()) / (mh.getItemColunaA() + mh.getItemColunaB() + mh.getItemColunaC() + mh.getItemColunaD());
                mh.setValorPeso(valorPeso);
                mhi.setSomaTotalPeso(valorPeso);
                listaMantel.add(mh);
                MantelHaenszelImplements.setResultado(MantelHaenszelImplements.getResultado() + (i + 1) + "     " + "    VP: " + mh.getItemColunaA() + "     FP: " + mh.getItemColunaB() + "     FN: " + mh.getItemColunaC() + "     VF: " + mh.getItemColunaD() + "     DOR:   " + mh.getDor() + "\n");
                calculaPesoMultipDor();
                calculaPesoPorcento();
                contador++;

            } catch (Exception e) {
                System.out.println("Erro na MantelHaenszelImplements: " + e.getMessage());
            }
        }
        System.out.println("FIM");
        if (contador <= 1) {
            JOptionPane.showMessageDialog(null, "POR FAVOR COMPLETE MAIS DE UMA LINHA.");
            return;
        }

        if (MantelHaenszelImplements.getResultado() != "") {
            JOptionPane.showMessageDialog(null, MantelHaenszelImplements.getResultado());
        } else {
            JOptionPane.showMessageDialog(null, "Nenhuma linha completa corretamente...");
        }
        calculapooled();
        calculaPesoPorcento();
    }

    private void calculaPesoMultipDor(){
        double pesoMultipDor = 0;
        pesoMultipDor = mh.getDor() * mh.getValorPeso();
        mh.setPesoMultipDor(pesoMultipDor);
        mhi.setSomaTotalPesMultipDor(pesoMultipDor);
    }
    private void calculaPesoPorcento() throws SQLException {
        
        
        MantelDAO mdao = new MantelDAO();
        mdao.remove();
        listaCompleta.clear();
        
        for (MantelHaenszel mh : listaMantel) {
//            double valorPeso = (mh.getItemColunaB() * mh.getItemColunaC()) / (mh.getItemColunaB() + mh.getItemColunaC() + mh.getItemColunaB() + mh.getItemColunaC());
            mh.setValorPesoPorcento((mh.getValorPeso() / (MantelHaenszelImplements.getSomaTotalPeso())) * 100);
            listaCompleta.add(mh);
            System.out.println("Peso: "+mh.getValorPeso()+" DOR: " + mh.getDor() + " Item da coluna A: " + mh.getItemColunaA() + " Item da coluna B: " + mh.getItemColunaB()
                    + " Item da coluna C:" + mh.getItemColunaC() + " Item da coluna D:" + mh.getItemColunaD() + " Valor do peso: (%) " + mh.getValorPesoPorcento());

        }

        System.out.println("-----------------INICIO DO  LISTA COMPLETA------");
        for (MantelHaenszel mh : listaCompleta) {

            System.out.println("Peso: "+mh.getValorPeso()+" DOR: " + mh.getDor() + " Item da coluna A: " + mh.getItemColunaA() + " Item da coluna B: " + mh.getItemColunaB()
                    + " Item da coluna C:" + mh.getItemColunaC() + " Item da coluna D:" + mh.getItemColunaD() + " Valor do peso: (%) " + mh.getValorPesoPorcento());

            mdao.insere(mh);
        }
        System.out.println("Valor do dorpooled: "+mhi.getDorPooled());
    }

    public List getListaMantel() {
        return listaMantel;
    }

    public void setListaMantel(List listaMantel) {
        this.listaMantel = listaMantel;
    }

    private void calculapooled() {
        double pooled  = 0;
        pooled = mhi.getSomaTotalPesMultipDor()/mhi.getSomaTotalPeso();
        mhi.setDorPooled(pooled);
    }

}
